#!/usr/bin/env python
# -*- coding: utf-8 -*-

import msgpack
import pytest

from tinyrpc import InvalidReplyError, MethodNotFoundError
from tinyrpc.protocols.msgpackrpc import (
    MSGPACKRPCParseError,
    MSGPACKRPCInvalidRequestError,
    MSGPACKRPCMethodNotFoundError,
    MSGPACKRPCInvalidParamsError,
    MSGPACKRPCInternalError,
)


def _msgpack_equal(a, b):
    return msgpack.unpackb(a) == msgpack.unpackb(b)


@pytest.fixture
def prot():
    from tinyrpc.protocols.msgpackrpc import MSGPACKRPCProtocol

    return MSGPACKRPCProtocol()


@pytest.mark.parametrize(
    ("data", "attrs"),
    [
        # examples from the JSON-RPC spec, translated to MSGPACK, parsing only
        (
            b"\x94\x00\x01\xa8subtract\x92*\x17",
            {"method": "subtract", "args": [42, 23], "unique_id": 1},
        ),
        (
            b"\x94\x00\x02\xa8subtract\x92\x17*",
            {"method": "subtract", "args": [23, 42], "unique_id": 2},
        ),
        (
            b"\x93\x02\xa6update\x95\x01\x02\x03\x04\x05",
            {"method": "update", "args": [1, 2, 3, 4, 5]},
        ),
        (b"\x93\x02\xa6foobar\x90", {"method": "foobar", "args": []}),
    ],
)
def test_parsing_good_request_samples(prot, data, attrs):
    req = prot.parse_request(data)

    for k, v in attrs.items():
        assert getattr(req, k) == v


@pytest.mark.parametrize(
    "invalid_msgpack",
    [
        b"\x81\xa3\x66\x6f\x6f\xa4\x62\x61\x72",
        b"\x94\x00\x01\x81\xa3aaa\xa3bb",
        b"garbage",
    ],
)
def test_parsing_invalid_msgpack(prot, invalid_msgpack):
    with pytest.raises(MSGPACKRPCParseError):
        prot.parse_request(invalid_msgpack)


@pytest.mark.parametrize(
    "data",
    [
        b"\xc0",  # None
        b"\x94\x00\xc0\xa3aaa\x90",  # [0, None, "aaa", []] - request ID not int
        b"\x95\x00\x02\xa3aaa\x90\xc0",  # [0, 2, "aaa", [], None] - too long
        b"\x94\x02\xa3aaa\x90\xc0",  # [2, "aaa", [], None] - too long
        b"\x93\x02\x01\x90",  # [2, 1, []] - method name not string
